\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k+kn}{from} \PYG{n+nn}{openai} \PYG{k+kn}{import} \PYG{n}{OpenAI}

\PYG{k}{class} \PYG{n+nc}{OpenAIValidator}\PYG{p}{(}\PYG{n}{SafetyValidator}\PYG{p}{):}
    \PYG{k}{def} \PYG{n+nf+fm}{\PYGZus{}\PYGZus{}init\PYGZus{}\PYGZus{}}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{):}
        \PYG{n+nb}{super}\PYG{p}{()}\PYG{o}{.}\PYG{n+nf+fm}{\PYGZus{}\PYGZus{}init\PYGZus{}\PYGZus{}}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}OpenAI\PYGZdq{}}\PYG{p}{)}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{client} \PYG{o}{=} \PYG{n}{OpenAI}\PYG{p}{()}

    \PYG{k}{def} \PYG{n+nf}{validate}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,} \PYG{n}{text}\PYG{p}{:} \PYG{n+nb}{str}\PYG{p}{)} \PYG{o}{\PYGZhy{}\PYGZgt{}} \PYG{n}{ValidationResult}\PYG{p}{:}
\PYG{+w}{        }\PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{        Validate input text using OpenAI\PYGZsq{}s moderation API.}

\PYG{l+s+sd}{        Args:}
\PYG{l+s+sd}{            text: Input text to validate}

\PYG{l+s+sd}{        Returns:}
\PYG{l+s+sd}{            ValidationResult with safety check results}
\PYG{l+s+sd}{        \PYGZdq{}\PYGZdq{}\PYGZdq{}}
        \PYG{n}{response} \PYG{o}{=} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{client}\PYG{o}{.}\PYG{n}{moderations}\PYG{o}{.}\PYG{n}{create}\PYG{p}{(}
            \PYG{n}{model}\PYG{o}{=}\PYG{l+s+s2}{\PYGZdq{}omni\PYGZhy{}moderation\PYGZhy{}latest\PYGZdq{}}\PYG{p}{,}
            \PYG{n+nb}{input}\PYG{o}{=}\PYG{n}{text}
        \PYG{p}{)}

        \PYG{n}{result} \PYG{o}{=} \PYG{n}{response}\PYG{o}{.}\PYG{n}{results}\PYG{p}{[}\PYG{l+m+mi}{0}\PYG{p}{]}
        \PYG{n}{is\PYGZus{}unsafe} \PYG{o}{=} \PYG{n}{result}\PYG{o}{.}\PYG{n}{flagged}

        \PYG{k}{if} \PYG{n}{is\PYGZus{}unsafe}\PYG{p}{:}
            \PYG{c+c1}{\PYGZsh{} Get list of triggered categories (only True values)}
            \PYG{n}{triggered} \PYG{o}{=} \PYG{p}{[]}
            \PYG{k}{for} \PYG{n}{attr} \PYG{o+ow}{in} \PYG{n+nb}{dir}\PYG{p}{(}\PYG{n}{result}\PYG{o}{.}\PYG{n}{categories}\PYG{p}{):}
                \PYG{k}{if} \PYG{o+ow}{not} \PYG{n}{attr}\PYG{o}{.}\PYG{n}{startswith}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}\PYGZus{}\PYGZsq{}}\PYG{p}{):}  \PYG{c+c1}{\PYGZsh{} Skip private attributes}
                    \PYG{n}{value} \PYG{o}{=} \PYG{n+nb}{getattr}\PYG{p}{(}\PYG{n}{result}\PYG{o}{.}\PYG{n}{categories}\PYG{p}{,} \PYG{n}{attr}\PYG{p}{)}
                    \PYG{k}{if} \PYG{n}{value} \PYG{o+ow}{is} \PYG{k+kc}{True}\PYG{p}{:}  \PYG{c+c1}{\PYGZsh{} Only include categories that are True}
                        \PYG{n}{triggered}\PYG{o}{.}\PYG{n}{append}\PYG{p}{(}\PYG{n}{attr}\PYG{p}{)}
            \PYG{n}{explanation} \PYG{o}{=} \PYG{l+s+sa}{f}\PYG{l+s+s2}{\PYGZdq{}Flagged categories: }\PYG{l+s+si}{\PYGZob{}}\PYG{l+s+s1}{\PYGZsq{}, \PYGZsq{}}\PYG{o}{.}\PYG{n}{join}\PYG{p}{(}\PYG{n}{triggered}\PYG{p}{)}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{\PYGZdq{}}
        \PYG{k}{else}\PYG{p}{:}
            \PYG{n}{explanation} \PYG{o}{=} \PYG{l+s+s2}{\PYGZdq{}No safety concerns detected\PYGZdq{}}

        \PYG{k}{return} \PYG{n}{ValidationResult}\PYG{p}{(}\PYG{n}{is\PYGZus{}unsafe}\PYG{o}{=}\PYG{n}{is\PYGZus{}unsafe}\PYG{p}{,} \PYG{n}{explanation}\PYG{o}{=}\PYG{n}{explanation}\PYG{p}{)}
\end{Verbatim}
